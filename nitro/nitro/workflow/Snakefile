import numpy
import requests
import itertools
from rich.console import Console
from tempfile import TemporaryDirectory


tempdir = TemporaryDirectory()
console = Console(tab_size=2, stderr=True)
only_file = []
only_sample = []
repeat_sample = []
for sample, files in config['SampleConfig'].items():
    only_sample.append(sample)
    repeat_sample.append(numpy.repeat(sample, len(files)).tolist())
    only_file.append(files)

only_file = list(itertools.chain(*only_file))
repeat_sample =list(itertools.chain(*repeat_sample))

onstart:
    config['db_loc'] = tempdir.name
    console.log(config)
    requests.post('http://localhost:5000/create', data={"db_loc": tempdir.name})

onsuccess:
    console.bell()
    requests.get('http://localhost:5000/exit')

onerror:
    console.rule('[ Pipeline Error ]')
    console.bell()
    requests.get('http://localhost:5000/exit')

rule all:
    input:
        expand(
            config["BaseDir"] / config["OutputDir"] / "output/{sample}/fastqc_report/{sample}_{file_id}_fastqc.html",
            zip, sample=repeat_sample, file_id=only_file
        ),
        expand(
            config["BaseDir"] / config["OutputDir"] / "output/{sample}/{sample}_{file_id}_fastp_trimmed.fastq.gz",
            zip, sample=repeat_sample, file_id=only_file
        ),
        expand(
            config["BaseDir"] / config["OutputDir"] / "output/{sample}/{sample}_{file_id}_trimmomatic_trimmed.fastq.gz",
            zip, sample=repeat_sample, file_id=only_file
        ),
        expand(config["BaseDir"] / config["OutputDir"] / "output/{sample}/qualimap_report/",
            sample=only_sample
        ),
        # expand(config["BaseDir"] / config["OutputDir"] / "output/{sample}/{sample}_no_cov.bed",
        #     sample=only_sample
        # ),
        expand(config["BaseDir"] / config["OutputDir"] / "output/{sample}/{sample}.reference.masked.fasta",
            sample=only_sample
        ),
        # expand(config["BaseDir"] / config["OutputDir"] / "output/{sample}/{sample}.vcf.gz",
        #     sample=only_sample
        # ),
        expand(config["BaseDir"] / config["OutputDir"] / "output/{sample}/{sample}.consensus.fasta",
            sample=only_sample
        ),

include: "rules/fastqc-0.11.9/main.smk"
include: "rules/fastp-0.23.2/main.smk"
include: "rules/trimmomatic-0.39/se.smk"
include: "rules/bwa-0.7.17/mem.smk"
include: "rules/samtools-1.15.1/sort.smk"
include: "rules/samtools-1.15.1/merge.smk"
include: "rules/samtools-1.15.1/index.smk"
include: "rules/qualimap-2.2.2/bamqc.smk"
include: "rules/bedtools-2.30.0/genomecov.smk"
include: "rules/bedtools-2.30.0/maskfasta.smk"
include: "rules/gatk-4.2.6.1/haplotypecaller.smk"
include: "rules/bcftools-1.15.1/consensus.smk"
